import React from 'react'

// ---------- Modules ----------
import JSONPretty from "react-json-pretty";
import * as polyfill from 'credential-handler-polyfill/';
import {Redirect, useHistory} from 'react-router-dom'
import axios from "axios";
// -----------------------------
// ---------- Styles -----------
import {Button, Col, Container, Row, Spinner} from 'react-bootstrap'
import {FaWallet} from "react-icons/fa";
// -----------------------------

class DisplayCred extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            vc: '',
            finished: false, // indicate that storing has completed, need to redirect
            registered: this.props.registered, // indicate whether wallet has been registered
            loaded: false, // indicate that vc has done loading
        };

        this.handleSave = this.handleSave.bind(this);
        this.sessionTransfer = this.sessionTransfer.bind(this);

        // load CHAPI
        (async () => {
            await polyfill.loadOnce(
                `${process.env.REACT_APP_MEDIATOR_URL}/mediator?origin=` +
                + encodeURIComponent(window.location.origin));
        })();
    }

    // call CHAPI store action (component credentialstore in wallet)
    async handleSave() {
        // create new permanent resident card type web credential
        const credToStore = this.state.vc;
        const credType = 'PermanentResidentCard';
        // eslint-disable-next-line no-undef
        const webCred = new WebCredential(credType, credToStore);
        try {
            const result = await navigator.credentials.store(webCred);
            if (result != null) {
                this.setState({
                    finished: true,
                })
            }
        } catch (e) {
            console.log(e)
        }
    }

    // encode sessionID in url to query user info from db and generate vc based on user info
    async sessionTransfer() {
        let sessionID = window.location.pathname.split("/").pop();
        let res;
        try {
            // response data contains vc generated by edge service
            res = await axios.get('https://localhost:8080/createVC?ID='+sessionID, {crossdomain:true})
            this.setState({
                vc: res.data,
                loaded: true,
            });
            console.log("vc => " ,this.state.vc)
        } catch (e){
            console.log(e);
        }
    }

    componentDidMount() {
        this.sessionTransfer()
    }

    render() {
        if (this.state.finished === true) {
            return <Redirect push to='/done'/>
        }

        return (
            <Container>
                  <Row>
                      <Col className="form-space">
                      </Col>
                  </Row>
                  <Row>
                      <Col>
                          <h1 className="mb-4">Your VC is Ready! Click Save to save it in your wallet!</h1>
                          {this.state.loaded ?
                              (<div className="txt-left">
                                  <JSONPretty json={this.state.vc} mainStyle="padding:1em" space="4" theme={{
                                      main: 'line-height:1.3;color:#00008b;background:#ffffff;overflow:auto;',
                                      error: 'line-height:1.3;color:#66d9ef;background:#272822;overflow:auto;',
                                      key: 'color:#f92672;',
                                      string: 'color:#2B7942;',
                                      value: 'color:#2B7942;',
                                      boolean: 'color:#0000B3;',
                                  }}/>
                                  <Button className="float-right mb-5" onClick={this.handleSave}>Save <FaWallet className="white ml-1 mb-1"/></Button>
                              </div>) :
                              (<Spinner className="center" animation="border" variant="primary"/>)}
                      </Col>
                  </Row>
            </Container>
        )
    }
}

export default DisplayCred